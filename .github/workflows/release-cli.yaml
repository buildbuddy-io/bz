name: "Release CLI"

on:
  workflow_dispatch:
  pull_request_target:
    types:
      - closed
    paths:
      - "cli/**"

jobs:
  push-tag:
    if: github.event_name == 'workflow_dispatch' || (github.event.pull_request.merged == true && !contains(github.event.pull_request.body, 'release skip'))
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - name: Checkout /bz
        uses: actions/checkout@v3
        with:
          # We need to fetch git tags to obtain the latest cli version tag.
          fetch-depth: 0

      - name: Push tag
        run: |
          git config --local user.email "github-actions-release-bot@users.noreply.github.com"
          git config --local user.name "github-actions-release[bot]"
          ./cli/release.py --auto

      - name: Get CLI version
        id: version
        run: |
          version=$(git tag -l 'cli-v*' --sort=creatordate |
            perl -nle 'if (/^cli-v(\d+\.\d+\.\d+)$/) { print $1 }' |
            tail -n1)
          echo $version
          echo "VERSION=$version" >> "$GITHUB_OUTPUT"

  create-release:
    runs-on: ubuntu-22.04
    needs: push-tag
    steps:
      - name: Create draft release
        # env:
        #   GITHUB_TOKEN: ${{ secrets.BUILDBUDDY_GITHUB_USER_TOKEN }}
        run: |
          set -x  # print executed commands
          if gh release view ${{ needs.push-tag.outputs.version }} --repo=buildbuddy-io/bz; then
            echo "buildbuddy-io/bz release ${{ needs.push-tag.outputs.version }} already exists."

            # It's OK if the release already exists; the build-artifacts job will just overwrite
            # any existing artifacts.
            exit 0
          fi

          TAG=${{ needs.push-tag.outputs.version }}

          cd "${GITHUB_WORKSPACE}/bz"
          git fetch --all --tags
          if [[ "$(git tag -l "$TAG")" ]]; then
            echo "Tag $TAG already exists."
          else
            git tag "$TAG"
            git push origin "$TAG"
          fi
          gh release create "$TAG" \
            --repo=buildbuddy-io/bz --title="$TAG" --draft --notes="Release version $TAG"

  build-artifacts:
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
          - os: ubuntu-22.04-16cpu-arm64-arm-limited # linux arm64
          - os: macos-13 # macOS amd64
          - os: macos-13-xlarge # macOS arm64
    runs-on: ${{ matrix.os }}
    needs: [push-tag, create-release]
    steps:
      - name: Clean workspace
        run: |
          set -x
          ls -la ./
          rm -rf ./* || true
          rm -rf ./.??* || true
          ls -la ./

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: bz

      - name: Restore caches
        id: cache-restore
        uses: ./bz/.github/actions/cache-restore

      - name: Build Artifacts
        id: build
        env:
          XCODE_VERSION: 12.4
          GO_REPOSITORY_USE_HOST_CACHE: 1
        run: |
          set -x  # print executed commands
          if [[ "$OSTYPE" == darwin* ]]; then
            OS=darwin
            GOMODCACHE=/Users/runner/go-mod-cache
          else
            OS=linux
            GOMODCACHE=/home/runner/go-mod-cache
          fi
          ARCH=$(uname -m)
          # bazelisk uses "x86_64" / "arm64" convention
          if [[ "$ARCH" == "aarch64" ]]; then
            ARCH=arm64
          fi
          VERSION=${{ needs.push-tag.outputs.version }}

          cd "${GITHUB_WORKSPACE}/bz"
          bazelisk build \
              --repository_cache='~/repo-cache/' \
              # --remote_header=x-buildbuddy-api-key=${{ secrets.BUILDBUDDY_ORG_API_KEY }} \
              --//cli/version:cli_version="$VERSION" \
              //cli/cmd/bz

          BINARY="bz-${VERSION}-${OS}-${ARCH}"
          cp bazel-bin/cli/cmd/bz/bz_/bz "$BINARY"
          shasum -a 256 "$BINARY" > "${BINARY}.sha256"
          echo "BINARY=${BINARY}" >> "$GITHUB_OUTPUT"

      - name: Upload Artifacts
        # env:
        #   GITHUB_TOKEN: ${{ secrets.BUILDBUDDY_GITHUB_USER_TOKEN }}
        run: |
          set -x  # print executed commands
          cd "${GITHUB_WORKSPACE}/bz"
          gh release upload \
            --repo buildbuddy-io/bz \
            --clobber \
            "${{ needs.push-tag.outputs.version }}" \
            "${{ steps.build.outputs.BINARY }}" \
            "${{ steps.build.outputs.BINARY }}.sha256"

      - name: Save cache
        uses: ./bz/.github/actions/cache-save
        with:
          repo-cache-dir: ${{ steps.cache-restore.outputs.repo-cache-dir }}
          go-mod-cache-dir: ${{ steps.cache-restore.outputs.go-mod-cache-dir }}
          yarn-cache-dir: ${{ steps.cache-restore.outputs.yarn-cache-dir }}

  publish-release:
    runs-on: ubuntu-22.04
    needs: [push-tag, sync-plugins, build-artifacts]
    steps:
      - name: Publish release
        # env:
        #   GITHUB_TOKEN: ${{ secrets.BUILDBUDDY_GITHUB_USER_TOKEN }}
        run: |
          gh release edit ${{ needs.push-tag.outputs.version }} --draft=false --repo=buildbuddy-io/bz